syntax = "proto3";

package notification.v1;

import "google/protobuf/timestamp.proto";


option go_package = "github.com/JrMarcco/jotice/api/gen/v1;notification_pb";

enum Channel {
    CHANNEL_UNSPECIFIED = 0;
    SMS = 1;
    EMAIL = 2;
    IN_APP = 3;
}

enum SendStatus {
    STATUS_UNSPECIFIED = 0;
    PREPARE = 1;
    CANCELED = 2;
    PENDING = 3;
    SUCCEED = 4;
    FAILED = 5;
}

enum ErrCode {
    ERR_UNSPECIFIED = 0;
}

message SendStrategy {
    oneof strategy_type {
        ImmediatelyStrategy immediate = 1;
        DelayedStrategy delayed = 2;
        ScheduledStrategy scheduled = 3;
        TimeWindowStrategy time_window = 4;
        DeadlineStrategy deadline = 5;
    }
}

message ImmediatelyStrategy {}

message DelayedStrategy {
    int64 delay_seconds = 1;
}

message ScheduledStrategy {
    google.protobuf.Timestamp send_time = 1;
}

message TimeWindowStrategy {
    int64 start_time_millis = 1;
    int64 end_time_millis = 2;
}

message DeadlineStrategy {
    google.protobuf.Timestamp deadline = 1;
}

message Notification {
    string key = 1;
    repeated string receivers = 2;
    Channel channel = 3;
    string temp_id = 4;
    map<string, string> temp_params = 5;
    SendStrategy strategy = 6;
}

service NotificationSvc {
    rpc Send(NotificationSendReq) returns (NotificationSendResp);
    rpc AsyncSend(NotificationAsyncSendReq) returns (NotificationAsyncSendResp);
    rpc BatchSend(NotificationBatchSendReq) returns (NotificationBatchSendResp);
    rpc AsyncBatchSend(NotificationBatchSendReq) returns (NotificationAsyncBatchSendResp);

    rpc TxPrepare(TxPrepareReq) returns (TxPrepareResp);
    rpc TxCommit(TxCommitReq) returns (TxCommitResp);
    rpc TxCancel(TxCancelReq) returns (TxCancelResp);
}

message NotificationSendReq {
    Notification notification = 1;
}

message NotificationSendResp {
    uint64 notification_id = 1;
    SendStatus status = 2;
    ErrCode err_code = 3;
    string err_msg = 4;
}

message NotificationAsyncSendReq {
    Notification notification = 1;
}

message NotificationAsyncSendResp {
    uint64 notification_id = 1;
    SendStatus status = 2;
    ErrCode err_code = 3;
    string err_msg = 4;
}

message NotificationBatchSendReq {
    repeated Notification notifications = 1;
}

message NotificationBatchSendResp {
    repeated NotificationSendResp results = 1;
    int32  total_cnt = 2;
    int32  success_cnt = 3;
}

message NotificationAsyncBatchSendReq {
    repeated Notification notifications = 1;
}

message NotificationAsyncBatchSendResp {
    repeated uint64 notification_ids = 1;
}

message TxPrepareReq {
    Notification notification = 1;
}

message TxPrepareResp {}

message TxCommitReq {
    string key = 1;
}

message TxCommitResp {}

message TxCancelReq {
    string key = 1;
}

message TxCancelResp {}
